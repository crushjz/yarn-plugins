{
  "root": true,
  "ignorePatterns": ["**/*"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.*?.json",
    "ecmaVersion": 2020,
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "prettier", "import", "functional"],
  "extends": [
    "airbnb-base", // Includes import plugin
    "plugin:import/typescript",
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "rules": {
    // Prettier
    "prettier/prettier": ["warn"],

    // JavaScript
    "no-use-before-define": "off",
    "no-shadow": "off",

    // TypeScript
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "args": "all",
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic",
        "readonly": "generic"
      }
    ],
    "@typescript-eslint/no-explicit-any": "error",

    // Import
    // Can't make `no-unresolved` working with `@typescript-eslint/parser`
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off",
    "import/no-named-as-default": "error",
    "import/no-named-as-default-member": "off",
    "import/default": "off",
    "import/extensions": ["error", "never", { "json": "always" }],

    // Functional -> https://github.com/jonaskello/eslint-plugin-functional#readme
    "functional/immutable-data": [
      "error",
      {
        "ignorePattern": ["^mutable"]
      }
    ],
    "functional/no-let": [
      "warn",
      {
        "ignorePattern": ["^mutable"]
      }
    ],
    "functional/prefer-readonly-type": [
      "warn",
      {
        "ignorePattern": ["^mutable"],
        "ignoreCollections": true
      }
    ]

    // IMPORTANT: JavaScript formatting rules are handled by prettier
  },
  "overrides": [
    {
      // JavaScript files
      "files": ["**/*.js"],
      "rules": {
        "functional/immutable-data": ["off"]
      }
    }
  ]
}
